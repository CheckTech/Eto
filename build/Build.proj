<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Package" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" InitialTargets="PrintInfo">
	<PropertyGroup>
		<Configuration Condition="$(Configuration) == ''">Release</Configuration>
        <BaseDir Condition="$(BaseDir) == ''">..</BaseDir>
        <SourceDir Condition="$(SourceDir) == ''">$(BaseDir)\src</SourceDir>
        <NugetDir Condition="$(NugetDir) == ''">$(SourceDir)</NugetDir>
        <ArtifactsDir Condition="$(BuildOutoutDir) == ''">$(BaseDir)\artifacts</ArtifactsDir>
		<ArtifactsNet45Dir Condition="$(ArtifactsNet45Dir) == ''">$(ArtifactsDir)\core\$(Configuration)\net45</ArtifactsNet45Dir>
		<ArtifactsNetStandard13Dir Condition="$(ArtifactsNetStandard13Dir) == ''">$(ArtifactsDir)\core\$(Configuration)\netstandard1.3</ArtifactsNetStandard13Dir>
		<ArtifactsModernDir Condition="$(ArtifactsModernDir) == ''">$(ArtifactsDir)\core\$(Configuration)\modern</ArtifactsModernDir>
		<PackageTargets Condition="$(PackageTargets) == ''">Build</PackageTargets>
        <NugetOutputDir Condition="$(NugetOutputDir) == ''">$(ArtifactsDir)\nuget\$(Configuration.Trim('\\'))</NugetOutputDir>
        <Platform Condition="$(Platform) == '' and '$(OS)' == 'Unix' and !Exists('/Library/Frameworks')">Linux</Platform>
        <Platform Condition="$(Platform) == '' and '$(OS)' == 'Unix' and Exists('/Library/Frameworks')">Mac</Platform>
        <Platform Condition="$(Platform) == '' and '$(OS)' != 'Unix'">Windows</Platform>
		<BuildVersion Condition="$(BuildVersion) == ''"></BuildVersion>
		<XamarinStudioAddinProject>$(SourceDir)\Addins\Eto.Addin.XamarinStudio.sln</XamarinStudioAddinProject>
		<VisualStudioAddinProject>$(SourceDir)\Addins\Eto.Addin.VisualStudio.sln</VisualStudioAddinProject>
		<mdtool Condition="$(mdtool) == '' and $(Platform) == 'Linux'">"mdtool"</mdtool>
		<mdtool Condition="$(mdtool) == '' and $(Platform) == 'Mac'">"/Applications/Xamarin Studio.app/Contents/MacOS/mdtool"</mdtool>
		<mdtool Condition="$(mdtool) == '' and $(Platform) == 'Windows'">"c:\Program Files (x86)\Xamarin Studio\bin\mdtool.exe"</mdtool>
		<UtilitiesBasePath>$(ArtifactsDir)\obj</UtilitiesBasePath>
	</PropertyGroup>
	
	<Target Name="PrintInfo">
		<Message Text="Building:" Importance="high" />
		<Message Text="  Configuration: $(Configuration)" Importance="high" />
		<Message Text="  Platform: $(Platform)" Importance="high" />
	</Target>
	
	<Import Project="Utilities.targets" Condition="$(UtilitiesImported) == ''" />
	
	<Target Name="UpdateVersion" Condition="$(BuildVersion) != ''" DependsOnTargets="_GetVersion">

		<Message Text="Set Version: $(BuildVersion)" Condition="$(BuildVersion) != ''" />

		<PropertyGroup>
			<BuildIncrement Condition="$(BuildVersion) == '' and $(BuildIncrement) == ''">0.1.0.0</BuildIncrement>
			<BuildVersion Condition="$(BuildVersion) == ''">$(CurrentVersion)</BuildVersion>
		</PropertyGroup>
		
		<Message Text="Current Version: $(CurrentVersion)" Condition="$(CurrentVersion) != ''" />
		<Message Text="Incrementing by: $(BuildIncrement)" Condition="$(BuildIncrement) != ''" />

		<IncrementVersion Version="$(BuildVersion)" Increment="$(BuildIncrement)">
			<Output TaskParameter="AssemblyVersion" PropertyName="AssemblyVersion" />
			<Output TaskParameter="AssemblyInformationalVersion" PropertyName="AssemblyInformationalVersion" />
		</IncrementVersion>
		
		<Message Text="New Version: $(AssemblyVersion)" />
		<Message Text="New Informational Version: $(AssemblyInformationalVersion)" />
		
		<FileUpdate Files="$(SourceDir)\Shared\GlobalAssemblyInfo.cs"
			WarnOnNoUpdate="true"
            Pattern='AssemblyInformationalVersion(\\s*)[(]&quot;.*?&quot;[)]'
            Replacement='AssemblyInformationalVersion$1(&quot;$(AssemblyInformationalVersion)&quot;)' />
            
		<FileUpdate Files="$(SourceDir)\Shared\GlobalAssemblyInfo.cs"
			WarnOnNoUpdate="true"
            Pattern='AssemblyVersion(\\s*)[(]&quot;.*?&quot;[)]'
            Replacement='AssemblyVersion$1(&quot;$(AssemblyVersion)&quot;)' />
        
        <ItemGroup>
        	<TemplateFiles Include="$(SourceDir)\Addins\Eto.Addin.VisualStudio\**\*.vstemplate" />
        	<TemplateFiles Include="$(SourceDir)\Addins\Eto.Addin.XamarinStudio\**\*.xpt.xml" />
        	<ProjFiles Include="$(SourceDir)\Addins\Eto.Addin.XamarinStudio\Eto.Addin.XamarinStudio.csproj" />
        	<ProjFiles Include="$(SourceDir)\Addins\Eto.Addin.XamarinStudio\Eto.Addin.XamarinStudio - nuget.csproj" />
        	<TemplateFiles Include="$(MSBuildThisFileDirectory)\packages.config" />
        </ItemGroup>
        
		<FileUpdate Files="@(ProjFiles)"
			WarnOnNoUpdate="true"
            Pattern="(?&lt;=Eto.[\\w\\.]+?)(\\.\\d+)*([-]\\w+\\d*)?\\.nupkg"
            Replacement='.$(AssemblyInformationalVersion).nupkg' />
            
		<FileUpdate Files="@(TemplateFiles)"
			WarnOnNoUpdate="false"
            Pattern="(?&lt;=id\\s*[=]\\s*&quot;Eto\\.[\\w\\.]+&quot;\\s+)version\\s*=\\s*&quot;[^&quot;]+&quot;"
            Replacement='version=&quot;$(AssemblyInformationalVersion)&quot;' />
	</Target>
	
	<Target Name="UpdateReference">

		<Error Condition="$(ReferenceName) == '' or $(ReferenceVersion) == ''" Text="Must Specify ReferenceName and ReferenceVersion properties" />
	
		<PropertyGroup>
			<ReferenceName>$(ReferenceName.Replace('.', '\\.'))</ReferenceName>
		</PropertyGroup>
	
        <ItemGroup>
        	<TemplateFiles Include="$(SourceDir)\Addins\Eto.Addin.VisualStudio\**\*.vstemplate" />
        	<TemplateFiles Include="$(SourceDir)\Addins\Eto.Addin.XamarinStudio\**\*.xpt.xml" />
        	<TemplateFiles Include="$(SourceDir)\**\packages.config" />
        	<TemplateFiles Include="$(MSBuildThisFileDirectory)\nuspec\**\*.nuspec" />

        	<ProjFiles Include="$(SourceDir)\**\*.csproj" />
        </ItemGroup>
        
		<FileUpdate Files="@(ProjFiles)"
			WarnOnNoUpdate="false"
            Pattern="(?&lt;=&lt;PackageReference.+?Include\\s*[=]\\s*&quot;$(ReferenceName)&quot;.+?Version\\s*[=]\\s*&quot;)([\\.\\d]+)"
            Replacement='$(ReferenceVersion)' />

		<FileUpdate Files="@(ProjFiles)"
			WarnOnNoUpdate="false"
            Pattern="(?&lt;=&lt;PackageReference.+?Include\\s*[=]\\s*&quot;$(ReferenceName)&quot;.*&gt;\\s*&lt;Version&gt;)([\\.\\d]+)"
            Replacement='$(ReferenceVersion)' />
            
		<FileUpdate Files="@(TemplateFiles)"
			WarnOnNoUpdate="false"
            Pattern="(?&lt;=id\\s*[=]\\s*&quot;$(ReferenceName)&quot;\\s+)version\\s*=\\s*&quot;[^&quot;]+&quot;"
            Replacement='version=&quot;$(ReferenceVersion)&quot;' />
	</Target>

	<Target Name="BuildHelpShfb" DependsOnTargets="Build">
		<PropertyGroup>
        	<SHFBVersion>2014.11.22</SHFBVersion>
			<SHFBPath>$(MSBuildThisFileDirectory)\packages\EWSoftware.SHFB.$(SHFBVersion)\tools</SHFBPath>
		    <SHFBLib>$([MSBUILD]::Unescape($(SHFBPath)\MSBuild.Community.Tasks.dll))</SHFBLib>
			<SHFBROOT Condition=" '$(SHFBROOT)' == '' ">$(SHFBPath)</SHFBROOT>
		</PropertyGroup>
  		<Exec Command="nuget install EWSoftware.SHFB -OutputDirectory packages" Condition="! Exists('$(SHFBPath)')" />

    	<MSBuild Projects="$(MSBuildThisFileDirectory)\help\Help.shfbproj" Properties="Configuration=$(Configuration)" />
	</Target>
	
	<ItemGroup>
		<Package Include="Eto.Forms">
			<Assembly>$(ArtifactsNet45Dir)\Eto.dll</Assembly>
		</Package>
		<Package Include="Eto.Platform.Gtk">
			<Assembly>$(ArtifactsNet45Dir)\Eto.Gtk2.dll</Assembly>
		</Package>
		<Package Include="Eto.Platform.Gtk3">
			<Assembly>$(ArtifactsNet45Dir)\Eto.Gtk3.dll</Assembly>
		</Package>
		<Package Include="Eto.Platform.Mac">
			<Assembly>$(ArtifactsNet45Dir)\Eto.Mac.dll</Assembly>
		</Package>
		<Package Include="Eto.Platform.Mac64">
			<Assembly>$(ArtifactsNet45Dir)\Eto.Mac64.dll</Assembly>
		</Package>
		<Package Include="Eto.Platform.XamMac">
			<Assembly>$(ArtifactsNet45Dir)\Eto.XamMac.dll</Assembly>
		</Package>
		<Package Include="Eto.Platform.XamMac2">
			<Assembly>$(ArtifactsModernDir)\Eto.XamMac2.dll</Assembly>
		</Package>
		<Package Include="Eto.Platform.Windows">
			<Assembly>$(ArtifactsNet45Dir)\Eto.WinForms.dll</Assembly>
		</Package>
		<Package Include="Eto.Platform.Direct2D">
			<Assembly>$(ArtifactsNet45Dir)\Eto.Direct2D.dll</Assembly>
		</Package>
		<Package Include="Eto.Platform.Wpf" Condition="$(Platform) == 'Windows'">
			<Assembly>$(ArtifactsNet45Dir)\Eto.Wpf.dll</Assembly>
		</Package>
		<!--
		<Package Include="Eto.Platform.WinRT" Condition="$(Platform) == 'Windows'">
			<Assembly>$(BuildOutputPCLDir)\Eto.WinRT.dll</Assembly>
		</Package>
		<Package Include="Eto.Platform.iOS" Condition="$(Platform) == 'Mac'">
			<Assembly>$(BuildOutputPCLDir)\Eto.iOS.dll</Assembly>
		</Package>
		-->
		<Package Include="Eto.Serialization.Json">
			<Assembly>$(ArtifactsNetStandard13Dir)\Eto.Serialization.Json.dll</Assembly>
		</Package>
		<Package Include="Eto.Serialization.Xaml">
			<Assembly>$(ArtifactsNetStandard13Dir)\publish\Eto.Serialization.Xaml.dll</Assembly>
		</Package>
	</ItemGroup>
	
	<Target Name="Build" DependsOnTargets="UpdateVersion">
		<!-- use nuget as msbuild/dotnet restore doesn't use package.config (needed only for Eto.Test.XamMac currently) -->
    	<MSBuild Targets="RestorePackages" Properties="PackageSource=$(SourceDir)\Eto.sln" Projects="NuGet.targets" />

    	<MSBuild Projects="$(SourceDir)\Eto.sln" Targets="$(PackageTargets)" Properties="Configuration=$(Configuration);Platform=$(Platform)" />
    	
    	<!-- When building windows, assume xamarin.mac is installed and build XamMac2 platform 
    	Note: works when compiling through VS 2017 but not msbuild command line.. why?
    	<MSBuild Projects="$(SourceDir)\Eto.sln" Targets="Eto_XamMac2_modern:$(PackageTargets)" Properties="Configuration=$(Configuration);Platform=Mac" Condition="$(Platform) == 'Windows'"/>
    	<MSBuild Projects="$(SourceDir)\Eto.sln" Targets="Eto_XamMac2_net45:$(PackageTargets)" Properties="Configuration=$(Configuration);Platform=Mac" Condition="$(Platform) == 'Windows'"/>
    	-->

		<MSBuild Projects="$(BaseDir)\samples\Samples.sln" Targets="$(PackageTargets)" Properties="Configuration=$(Configuration);Platform=$(Platform)"/>

		<!-- hack: publish Eto.Serialization.Xaml to get a copy of Portable.Xaml, so we can get version info -->
    	<MSBuild Projects="$(SourceDir)\Eto.sln" Targets="Eto_Serialization_Xaml:Publish" Properties="Configuration=$(Configuration);Platform=$(Platform)"/>
	</Target>
	
    <Target Name="Package" DependsOnTargets="Build;GetMainAssemblyVersion">
    	<MSBuild Targets="BuildPackage" Properties="Configuration=$(Configuration);AssemblyPath=%(Package.Assembly);NuspecPath=nuspec\%(Package.Identity).nuspec;BasePath=$(BaseDir);NupkgOutputDir=$(NugetOutputDir)" Projects="nuget.targets" Condition="Exists('%(Package.Assembly)')" />
		
		<ItemGroup>
			<StandalonePackage Include="Eto.Forms.Sample\Eto.Forms.Sample"/>
			<StandalonePackage Include="Eto.Platform.Mac.Template"/>
		</ItemGroup>
		
    	<MSBuild Targets="BuildPackage" Properties="Configuration=$(Configuration);AssemblyPath=;NuspecPath=nuspec\%(StandalonePackage.Identity).nuspec;NupkgOutputDir=$(NugetOutputDir);NugetBuildOptions=-Version $(AssemblyVersion)" Projects="nuget.targets" />
    </Target>

    <Target Name="BuildAddins">
    	<!-- monodevelop/VS for Mac -->
    	<MSBuild Projects="$(XamarinStudioAddinProject)" Targets="Restore" Properties="Configuration=XSRelease" Condition="$(Platform) != 'Windows'" />
    	<MSBuild Projects="$(XamarinStudioAddinProject)" Targets="Build" Properties="Configuration=XSRelease" Condition="$(Platform) != 'Windows'" />
    	<Exec Command="$(mdtool) setup pack $(BaseDir)/artifacts/$(Configuration)/addins/XamarinStudio/Eto.Addin.XamarinStudio.dll -d:$(BaseDir)/artifacts/$(Configuration)/addins" Condition="$(Platform) != 'Windows'"/>

		<!-- Visual Studio Addin -->
    	<Exec Command="$(NuGetCommand) restore $(VisualStudioAddinProject)" Condition="$(Platform) == 'Windows'" />
    	<MSBuild Projects="$(VisualStudioAddinProject)" Targets="Build" Properties="Configuration=$(Configuration)" Condition="$(Platform) == 'Windows'" />
    </Target>
    
    <Target Name="Publish" DependsOnTargets="GetMainAssemblyVersion">
    	<MSBuild Targets="PublishPackage" Properties="NupkgName=%(Package.Identity).$(AssemblyVersion).nupkg;TargetDir=$(NugetOutputDir)" Projects="$(MSBuildProjectFile)"/>
    </Target>
    
	<Target Name="Clean">
		<RemoveDir Directories="$(ArtifactsDir)"/>
		<RemoveDir Directories="$(SourceDir)\packages"/>
		<RemoveDir Directories="$(BaseDir)\samples\packages"/>
		<RemoveDir Directories="$(SourceDir)\Addins\packages"/>
	</Target>
	
	<Target Name="GetMainAssemblyVersion" DependsOnTargets="Build">
		<GetAssemblyInfo AssemblyFileName="$(ArtifactsNet45Dir)\Eto.dll">
			<Output TaskParameter="AssemblyInformationalVersion" PropertyName="AssemblyVersion" />
		</GetAssemblyInfo>
	</Target>
	

	<Target Name="_GetVersion">
		<FileExtract File="$(SourceDir)\Shared\GlobalAssemblyInfo.cs"
			Pattern='(?&lt;=AssemblyInformationalVersion(\\s*)[(]&quot;).*(?=&quot;[)])'
			Condition="$(BuildVersion) == ''">
			<Output TaskParameter="Output" PropertyName="CurrentVersion" />
		</FileExtract>
	</Target>
	
	<Target Name="MakeRelease" DependsOnTargets="Clean;_GetVersion">
		<Exec Command='git diff --quiet HEAD' IgnoreExitCode="true">
			<Output TaskParameter="ExitCode" PropertyName="HasChanges" />
		</Exec>
		<Error Text="The current working copy is dirty. Commit or stash your changes" Condition="$(HasChanges) != '0'" />

		<IncrementVersion Version="$(CurrentVersion)" RemovePrerelease="true">
			<Output TaskParameter="AssemblyVersion" PropertyName="AssemblyVersion" />
			<Output TaskParameter="AssemblyInformationalVersion" PropertyName="AssemblyInformationalVersion" />
		</IncrementVersion>
		
	    <MSBuild Projects="$(MSBuildProjectFile)" Targets="UpdateVersion" Properties="BuildVersion=$(AssemblyInformationalVersion)" />
		<PropertyGroup>
			<Branch>release\$(AssemblyInformationalVersion)</Branch>
			<NewVersion>$(AssemblyInformationalVersion)</NewVersion>
			<NewDevelopVersion>$(AssemblyInformationalVersion)-alpha</NewDevelopVersion>
		</PropertyGroup>
		<!-- Would be nice to use git flow here, but not usually installed -->
		<Exec Command='git checkout develop' />
		<Exec Command='git checkout -b "$(Branch)"' />
		<Exec Command='git add -u' />
		<Exec Command='git commit -m "Updating to $(NewVersion)"' />
		
		<!-- update develop -->
		<Exec Command='git checkout develop' />
		<Exec Command='git merge --no-ff "$(Branch)"' />
		
		<!-- update master -->
		<Exec Command='git checkout master' />
		<Exec Command='git merge --no-ff "$(Branch)"' IgnoreExitCode="true">
			<Output TaskParameter="ExitCode" PropertyName="MergeError" />
		</Exec>
		<Warning Text="Merge errors, using develop version.  Check merge result in master." Condition="$(MergeError) != '0'" />
		<Exec Command='git reset --hard' Condition="$(MergeError) != '0'" />
		 <!-- dangerous! using develop if any conflicts. -->
		<Exec Command='git merge --no-ff --strategy-option theirs "$(Branch)"' Condition="$(MergeError) != '0'" />

		<!-- tag version and delete release branch -->
		<Exec Command='git tag "$(NewVersion)"' />
		<Exec Command='git branch -d "$(Branch)"' />

		<!-- update develop version -->
		<Exec Command='git checkout develop' />
		<MSBuild Projects="$(MSBuildProjectFile)" Targets="UpdateVersion" Properties="BuildVersion=$(NewDevelopVersion);BuildIncrement=0.1.0.0" />
		<Exec Command='git add -u' />
		<Exec Command='git commit -m "Updating to $(AssemblyInformationalVersion)"' />
		
		<!-- checkout master and build packages -->
		<Exec Command='git checkout master' />
		<CallTarget Targets="Package" />
	</Target>
		
</Project>
